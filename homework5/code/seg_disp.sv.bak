module seg_disp(
    input clock,
    input [4:0] num,
    output reg [6:0] seg
    );

    reg [4:0] digit;
    
    always @(posedge clk) begin
        digit <= num;
    end
    
    always @(*) begin
        case (digit)
            5'd0: seg[6:0] = HEX_ZERO;
            5'd1: seg[6:0] = HEX_ONE;
            5'd2: seg[6:0] = HEX_TWO;
            5'd3: seg[6:0] = HEX_THREE;
            5'd4: seg[6:0] = HEX_FOUR;
            5'd5: seg[6:0] = HEX_FIVE;
            5'd6: seg[6:0] = HEX_SIX;
            5'd7: seg[6:0] = HEX_SEVEN;
            5'd8: seg[6:0] = HEX_EIGHT;
            5'd9: seg[6:0] = HEX_NINE;
            5'd10: seg[6:0] = HEX_A;
            5'd11: seg[6:0] = HEX_B;
            5'd12: seg[6:0] = HEX_C;
            5'd13: seg[6:0] = HEX_D;
            5'd14: seg[6:0] = HEX_E;
            5'd15: seg[6:0] = HEX_F;
            5'd16: seg[6:0] = IDLE_DISPLAY;
            5'd17: seg[6:0] = START_DISPLAY;
            5'd18: seg[6:0] = PROGRESS_DISPLAY;
            5'd19: seg[6:0] = ERROR_DISPLAY;
            5'd20: seg[6:0] = FINISHED_DISPLAY;
        endcase
	end
endmodule